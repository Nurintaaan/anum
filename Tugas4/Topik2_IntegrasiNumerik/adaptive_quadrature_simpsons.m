% Adaptive Quadrature Simpsons Function% Param f : function % Param a : init interval% Param b : final interval% Param eps : error tolerance% Return result : final_approximationfunction result = adaptive_quadrature_simpsons(f, a, b, eps)  count = 0  % 1. calc mid point  c = (a + b)/2;  % 2. calc func 1/10.abs(S(a,b), - S(a,c) - S(c,b))  res = abs((S(f, a, b) - S(f, a, c) - S(f, c, b))) / 10;  % 3. check whether it's smaller then error tolerance  if res < eps    result = S(f, a, c) + S(f, c, b);  else    el = 0    temp = [];    eps = (eps/2);    temp = [temp, adaptive_quadrature_simpsons(f, a, c, eps), adaptive_quadrature_simpsons(f, c, b, eps)];    result = sum(temp)  endend% Simpsons Function% Param f : function % Param a : init interval% Param b : final interval% Return Sf : result using simpsons'methodfunction Sf = S(f, a, b)  % 1. calc mid point  c = (a + b)/2;  % 2. calc ((b-a)/6) * (f(a) + 4f(c) + f(b))  Sf = ((b-a)/6) * (f(a) + 4 * f(c) + f(b));end